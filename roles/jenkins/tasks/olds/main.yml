---
# Variable setup.
- name: Add Jenkins repo url
  get_url:
    url:  "{{ jenkins_repo_url }}"
    dest: "{{ jenkins_repo_file }}"

- name: Add Jenkins repo GPG key
  rpm_key:
    key:   "{{ jenkins_repo_key_url }}"
    state: present

- name: Ensure dependencies are installed.
  package:
    name:
      - curl
      - libselinux-python #need?
      - initscripts #need?
    state: installed

# Download rpm
- name: Download specific Jenkins version.
  get_url:
    url:  "{{ jenkins_pkg_url }}/jenkins-{{ jenkins_version }}.noarch.rpm"
    dest: "/tmp/jenkins-{{ jenkins_version }}.noarch.rpm"

- name: Check if we downloaded a specific version of Jenkins.
  stat:
    path: "/tmp/jenkins-{{ jenkins_version }}.noarch.rpm"

# Install rpm
- name: Install our specific version of Jenkins.
  package:
    name:  "/tmp/jenkins-{{ jenkins_version }}.noarch.rpm"
    state: installed
  notify: configure default users

# Configure Jenkins init settings.
- include_tasks: settings.yml

# Make sure Jenkins starts, then configure Jenkins.
- name: Ensure Jenkins is started and runs on startup.
  service: name=jenkins state=started enabled=yes

- name: Disable Upgrade wizard
  copy:
    content: "{{ jenkins_version }}"
    dest:  "{{ jenkins_home }}/jenkins.install.UpgradeWizard.state"
    owner: jenkins
    group: jenkins
    mode: 0644

- name: Wait for Jenkins to start up before proceeding.
  command: >
    curl -D - --silent --max-time 5 http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/
  args:
    warn: false
  register: result
  until: >
    (result.stdout.find("403 Forbidden") != -1)
    or (result.stdout.find("200 OK") != -1)
    and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url:  "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_cli_jar_file }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay:  10
  check_mode: false

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
    state: absent
