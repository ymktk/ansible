---

# Setup as a tomcat instance

- name: Ensure {{ tomcat_instances_dir }}/{{ jenkins_instance_name }} exists
  file:
    path:  "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

- name: Ensure necessary dirs in {{ tomcat_instances_dir }}/{{ jenkins_instance_name }}
  file:
    path:  "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}/{{ item }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
  with_items:
    - "conf"
    - "temp"
    - "webapps"
    - "work"

- name: Ensure /var/log/tomcats/{{ jenkins_instance_name }} exists
  file:
    path:  /var/log/tomcats/{{ jenkins_instance_name }}
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

- name: Copy default conf files from {{ tomcat_catalina_dir }}/conf
  copy:
    remote_src: yes
    src:   "{{ tomcat_catalina_dir }}/conf/{{ item }}"
    dest:  "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}/conf/"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
  with_items: "{{ tomcat_necessary_default_conf_files }}"

- name: Copy jenkins.war from {{ jenkins_download_dir }}/jenkins-{{ jenkins_version }}
  copy:
    remote_src: yes
    src:   "{{ jenkins_download_dir }}/jenkins-{{ jenkins_version }}/jenkins.war"
    dest:  "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}/webapps/"
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"

- name: Update logging.properties
  template:
    src:  "logging-properties.j2"
    dest: "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}/conf/logging.properties"

- name: Update server.xml
  template:
    src:  "instance-server-9.0.xml.j2"
    dest: "{{ tomcat_instances_dir }}/{{ jenkins_instance_name }}/conf/server.xml"

- name: Update service setting
  template:
    src: "instance-service.j2"
    dest: /usr/lib/systemd/system/{{ jenkins_instance_name }}.service


# Setup jenkins_home

- name: Ensure jenkins_home {{ jenkins_home_dir }} exists
  file:
    path:  "{{ jenkins_home_dir }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode:  u+rwx
    follow: true

- name: Ensure {{ jenkins_work_dir }} exists
  file:
    path:  "{{ jenkins_work_dir }}"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode:  0775

- name: Ensure symlink {{ jenkins_home_dir }}/workspace to {{ jenkins_work_dir }} exists
  file:
    src:   "{{ jenkins_work_dir }}"
    dest:  "{{ jenkins_home_dir }}/workspace"
    state: link

- name: Ensure custom init scripts directory exists
  file:
    path:  "{{ jenkins_home_dir }}/init.groovy.d"
    state: directory
    owner: "{{ jenkins_user }}"
    group: "{{ jenkins_group }}"
    mode:  0775

- name: Configure proxy config for Jenkins
  template:
    src:    proxy.xml
    dest:   "{{ jenkins_home_dir }}/proxy.xml"
    owner:  "{{ jenkins_user }}"
    group:  "{{ jenkins_group }}"
    mode:   0664
  register: jenkins_proxy_config
  when:
    - jenkins_proxy_host | length > 0
    - jenkins_proxy_port | length > 0


# - name: Check if jenkins_init_file exists.
#   stat:
#     path:   "{{ jenkins_init_file }}"
#   register: jenkins_init_file_stat

# - name: Ensure jenkins_init_file exists.
#   file:
#     path: "{{ jenkins_init_file }}"
#     state: touch
#   when: not jenkins_init_file_stat.stat.exists

# - name: Set the Jenkins home directory.
#   lineinfile:
#     dest:   "{{ jenkins_init_file }}"
#     regexp: '^JENKINS_HOME=.*'
#     line:   'JENKINS_HOME={{ jenkins_home }}'
#   register: jenkins_home_config

# - name: Set HTTP port in Jenkins config.
#   lineinfile:
#     backrefs: true
#     dest: "{{ jenkins_init_file }}"
#     regexp: '^{{ jenkins_config_key_http_port }}='
#     line: '{{ jenkins_config_key_http_port }}={{ jenkins_http_port }}'
#   register: jenkins_http_config

# - name: Modify variables in init file.
#   lineinfile:
#     dest: "{{ jenkins_init_file }}"
#     insertafter: '^{{ item.option }}='
#     regexp: '^{{ item.option }}=\"\${{ item.option }} '
#     line: '{{ item.option }}="${{ item.option }} {{ item.value }}"'
#     state: present
#   with_items: "{{ jenkins_init_changes }}"
#   register: jenkins_init_prefix

# - name: Trigger handlers immediately in case Jenkins was installed
#   meta: flush_handlers

# - name: Immediately restart Jenkins on http or user changes.
#   service: name=jenkins state=restarted
#   when: >
#     (jenkins_users_config is defined and jenkins_users_config.changed)
#     or (jenkins_http_config is defined and jenkins_http_config.changed)
#     or (jenkins_home_config is defined and jenkins_home_config.changed)
#     or (jenkins_proxy_config is defined and jenkins_proxy_config.changed)
#   tags: ['skip_ansible_lint']
